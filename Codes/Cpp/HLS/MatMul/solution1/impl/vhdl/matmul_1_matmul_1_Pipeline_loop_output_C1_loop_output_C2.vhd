-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_1_matmul_1_Pipeline_loop_output_C1_loop_output_C2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_C_TREADY : IN STD_LOGIC;
    output_C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_C_ce0 : OUT STD_LOGIC;
    output_C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_phi_reload : IN STD_LOGIC_VECTOR (3 downto 0);
    p_phi7_reload : IN STD_LOGIC_VECTOR (3 downto 0);
    out_C_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_C_TVALID : OUT STD_LOGIC;
    out_C_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_C_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_C_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matmul_1_matmul_1_Pipeline_loop_output_C1_loop_output_C2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln61_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_C_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal local_stream_last_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal local_stream_last_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln64_2_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_fu_66 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln62_fu_234_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_load : STD_LOGIC_VECTOR (1 downto 0);
    signal row_fu_70 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln61_fu_175_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_row_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten55_fu_74 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln61_1_fu_143_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten55_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln62_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_155_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_187_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln64_fu_183_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln14_fu_167_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln64_fu_195_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln64_1_fu_207_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln64_fu_211_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmp101_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matmul_1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component matmul_1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    col_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln61_fu_137_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col_fu_66 <= add_ln62_fu_234_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_66 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten55_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln61_fu_137_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten55_fu_74 <= add_ln61_1_fu_143_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten55_fu_74 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln61_fu_137_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    row_fu_70 <= select_ln61_fu_175_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_70 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                local_stream_last_reg_299 <= local_stream_last_fu_228_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln61_1_fu_143_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten55_load) + unsigned(ap_const_lv4_1));
    add_ln61_fu_155_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_load) + unsigned(ap_const_lv2_1));
    add_ln62_fu_234_p2 <= std_logic_vector(unsigned(select_ln14_fu_167_p3) + unsigned(ap_const_lv2_1));
    add_ln64_fu_211_p2 <= std_logic_vector(unsigned(sub_ln64_fu_195_p2) + unsigned(zext_ln64_1_fu_207_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, out_C_TREADY, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((out_C_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, out_C_TREADY, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((out_C_TREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(out_C_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (out_C_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln61_fu_137_p2)
    begin
        if (((icmp_ln61_fu_137_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, col_fu_66, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_col_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_col_load <= col_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten55_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten55_fu_74)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten55_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten55_load <= indvar_flatten55_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_row_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, row_fu_70)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_row_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_row_load <= row_fu_70;
        end if; 
    end process;

    cmp101_fu_201_p2 <= "1" when (select_ln61_fu_175_p3 = ap_const_lv2_2) else "0";
    icmp_ln61_fu_137_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten55_load = ap_const_lv4_9) else "0";
    icmp_ln62_fu_161_p2 <= "1" when (ap_sig_allocacmp_col_load = ap_const_lv2_3) else "0";
    icmp_ln69_fu_222_p2 <= "1" when (select_ln14_fu_167_p3 = ap_const_lv2_2) else "0";
    local_stream_last_fu_228_p2 <= (icmp_ln69_fu_222_p2 and cmp101_fu_201_p2);
    out_C_TDATA <= output_C_q0;

    out_C_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_C_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_C_TDATA_blk_n <= out_C_TREADY;
        else 
            out_C_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_C_TKEEP <= p_phi_reload;
    out_C_TLAST <= local_stream_last_reg_299;
    out_C_TSTRB <= p_phi7_reload;

    out_C_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_C_TVALID <= ap_const_logic_1;
        else 
            out_C_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_C_address0 <= zext_ln64_2_fu_217_p1(4 - 1 downto 0);

    output_C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_C_ce0 <= ap_const_logic_1;
        else 
            output_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_fu_167_p3 <= 
        ap_const_lv2_0 when (icmp_ln62_fu_161_p2(0) = '1') else 
        ap_sig_allocacmp_col_load;
    select_ln61_fu_175_p3 <= 
        add_ln61_fu_155_p2 when (icmp_ln62_fu_161_p2(0) = '1') else 
        ap_sig_allocacmp_row_load;
    sub_ln64_fu_195_p2 <= std_logic_vector(unsigned(tmp_7_fu_187_p3) - unsigned(zext_ln64_fu_183_p1));
    tmp_7_fu_187_p3 <= (select_ln61_fu_175_p3 & ap_const_lv2_0);
    zext_ln64_1_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_167_p3),4));
    zext_ln64_2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_fu_211_p2),64));
    zext_ln64_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln61_fu_175_p3),4));
end behav;
