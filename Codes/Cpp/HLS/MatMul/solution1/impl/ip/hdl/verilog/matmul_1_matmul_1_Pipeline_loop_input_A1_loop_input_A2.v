// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matmul_1_matmul_1_Pipeline_loop_input_A1_loop_input_A2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_A_TVALID,
        in_A_TDATA,
        in_A_TREADY,
        in_A_TKEEP,
        in_A_TSTRB,
        in_A_TLAST,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_A_TVALID;
input  [31:0] in_A_TDATA;
output   in_A_TREADY;
input  [3:0] in_A_TKEEP;
input  [3:0] in_A_TSTRB;
input  [0:0] in_A_TLAST;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] p_out2;
output   p_out2_ap_vld;
output  [31:0] p_out3;
output   p_out3_ap_vld;
output  [31:0] p_out4;
output   p_out4_ap_vld;
output  [31:0] p_out5;
output   p_out5_ap_vld;
output  [31:0] p_out6;
output   p_out6_ap_vld;
output  [31:0] p_out7;
output   p_out7_ap_vld;
output  [31:0] p_out8;
output   p_out8_ap_vld;

reg ap_idle;
reg in_A_TREADY;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln24_fu_213_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_A_TDATA_blk_n;
reg   [1:0] col_fu_72;
wire   [1:0] add_ln26_fu_312_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_col_load;
reg   [1:0] row_fu_76;
wire   [1:0] select_ln24_fu_251_p3;
reg   [1:0] ap_sig_allocacmp_row_load;
reg   [3:0] indvar_flatten_fu_80;
wire   [3:0] add_ln24_1_fu_219_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] empty_fu_84;
wire   [31:0] input_A_0_fu_263_p1;
wire   [1:0] select_ln14_fu_243_p3;
reg   [31:0] empty_18_fu_88;
reg   [31:0] empty_19_fu_92;
reg   [31:0] empty_20_fu_96;
reg   [31:0] empty_21_fu_100;
reg   [31:0] empty_22_fu_104;
reg   [31:0] empty_23_fu_108;
reg   [31:0] empty_24_fu_112;
reg   [31:0] empty_25_fu_116;
wire   [0:0] icmp_ln26_fu_237_p2;
wire   [1:0] add_ln24_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 col_fu_72 = 2'd0;
#0 row_fu_76 = 2'd0;
#0 indvar_flatten_fu_80 = 4'd0;
#0 empty_fu_84 = 32'd0;
#0 empty_18_fu_88 = 32'd0;
#0 empty_19_fu_92 = 32'd0;
#0 empty_20_fu_96 = 32'd0;
#0 empty_21_fu_100 = 32'd0;
#0 empty_22_fu_104 = 32'd0;
#0 empty_23_fu_108 = 32'd0;
#0 empty_24_fu_112 = 32'd0;
#0 empty_25_fu_116 = 32'd0;
#0 ap_done_reg = 1'b0;
end

matmul_1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln24_fu_213_p2 == 1'd0)) begin
            col_fu_72 <= add_ln26_fu_312_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_fu_72 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln24_fu_213_p2 == 1'd0)) begin
            indvar_flatten_fu_80 <= add_ln24_1_fu_219_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln24_fu_213_p2 == 1'd0)) begin
            row_fu_76 <= select_ln24_fu_251_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            row_fu_76 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln14_fu_243_p3 == 2'd0) & (select_ln24_fu_251_p3 == 2'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_18_fu_88 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln24_fu_251_p3 == 2'd1) & ~(select_ln24_fu_251_p3 == 2'd0) & (select_ln14_fu_243_p3 == 2'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_19_fu_92 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln14_fu_243_p3 == 2'd1) & (select_ln24_fu_251_p3 == 2'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_20_fu_96 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln14_fu_243_p3 == 2'd1) & (select_ln24_fu_251_p3 == 2'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_21_fu_100 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln24_fu_251_p3 == 2'd1) & ~(select_ln24_fu_251_p3 == 2'd0) & (select_ln14_fu_243_p3 == 2'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_22_fu_104 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln14_fu_243_p3 == 2'd0) & ~(select_ln14_fu_243_p3 == 2'd1) & (select_ln24_fu_251_p3 == 2'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_23_fu_108 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln14_fu_243_p3 == 2'd0) & ~(select_ln14_fu_243_p3 == 2'd1) & (select_ln24_fu_251_p3 == 2'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_24_fu_112 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln24_fu_251_p3 == 2'd1) & ~(select_ln24_fu_251_p3 == 2'd0) & ~(select_ln14_fu_243_p3 == 2'd0) & ~(select_ln14_fu_243_p3 == 2'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_25_fu_116 <= input_A_0_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln14_fu_243_p3 == 2'd0) & (select_ln24_fu_251_p3 == 2'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_fu_84 <= input_A_0_fu_263_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_col_load = 2'd0;
    end else begin
        ap_sig_allocacmp_col_load = col_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_80;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_row_load = 2'd0;
    end else begin
        ap_sig_allocacmp_row_load = row_fu_76;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_213_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_A_TDATA_blk_n = in_A_TVALID;
    end else begin
        in_A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in_A_TREADY = 1'b1;
    end else begin
        in_A_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln24_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_219_p2 = (ap_sig_allocacmp_indvar_flatten_load + 4'd1);

assign add_ln24_fu_231_p2 = (ap_sig_allocacmp_row_load + 2'd1);

assign add_ln26_fu_312_p2 = (select_ln14_fu_243_p3 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln24_fu_213_p2 == 1'd0) & (in_A_TVALID == 1'b0)));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln24_fu_213_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_237_p2 = ((ap_sig_allocacmp_col_load == 2'd3) ? 1'b1 : 1'b0);

assign input_A_0_fu_263_p1 = in_A_TDATA;

assign p_out = empty_25_fu_116;

assign p_out1 = empty_24_fu_112;

assign p_out2 = empty_23_fu_108;

assign p_out3 = empty_22_fu_104;

assign p_out4 = empty_21_fu_100;

assign p_out5 = empty_20_fu_96;

assign p_out6 = empty_19_fu_92;

assign p_out7 = empty_18_fu_88;

assign p_out8 = empty_fu_84;

assign select_ln14_fu_243_p3 = ((icmp_ln26_fu_237_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_col_load);

assign select_ln24_fu_251_p3 = ((icmp_ln26_fu_237_p2[0:0] == 1'b1) ? add_ln24_fu_231_p2 : ap_sig_allocacmp_row_load);

endmodule //matmul_1_matmul_1_Pipeline_loop_input_A1_loop_input_A2
