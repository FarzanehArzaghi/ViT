-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_1_matmul_1_Pipeline_loop_input_A1_loop_input_A2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_A_TVALID : IN STD_LOGIC;
    in_A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_A_TREADY : OUT STD_LOGIC;
    in_A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC;
    p_out3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out3_ap_vld : OUT STD_LOGIC;
    p_out4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out4_ap_vld : OUT STD_LOGIC;
    p_out5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out5_ap_vld : OUT STD_LOGIC;
    p_out6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out6_ap_vld : OUT STD_LOGIC;
    p_out7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out7_ap_vld : OUT STD_LOGIC;
    p_out8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out8_ap_vld : OUT STD_LOGIC );
end;


architecture behav of matmul_1_matmul_1_Pipeline_loop_input_A1_loop_input_A2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln24_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_A_TDATA_blk_n : STD_LOGIC;
    signal col_fu_72 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln26_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_col_load : STD_LOGIC_VECTOR (1 downto 0);
    signal row_fu_76 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln24_fu_251_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_row_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln24_1_fu_219_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input_A_0_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln14_fu_243_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_18_fu_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_19_fu_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_20_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_21_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_22_fu_104 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_23_fu_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_24_fu_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_25_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmp_ln26_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_231_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matmul_1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component matmul_1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    col_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln24_fu_213_p2 = ap_const_lv1_0)) then 
                    col_fu_72 <= add_ln26_fu_312_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_72 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln24_fu_213_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_80 <= add_ln24_1_fu_219_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln24_fu_213_p2 = ap_const_lv1_0)) then 
                    row_fu_76 <= select_ln24_fu_251_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_76 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln14_fu_243_p3 = ap_const_lv2_0) and (select_ln24_fu_251_p3 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_18_fu_88 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln24_fu_251_p3 = ap_const_lv2_1)) and not((select_ln24_fu_251_p3 = ap_const_lv2_0)) and (select_ln14_fu_243_p3 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_19_fu_92 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln14_fu_243_p3 = ap_const_lv2_1) and (select_ln24_fu_251_p3 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_20_fu_96 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln14_fu_243_p3 = ap_const_lv2_1) and (select_ln24_fu_251_p3 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_21_fu_100 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln24_fu_251_p3 = ap_const_lv2_1)) and not((select_ln24_fu_251_p3 = ap_const_lv2_0)) and (select_ln14_fu_243_p3 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_22_fu_104 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln14_fu_243_p3 = ap_const_lv2_0)) and not((select_ln14_fu_243_p3 = ap_const_lv2_1)) and (select_ln24_fu_251_p3 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_23_fu_108 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln14_fu_243_p3 = ap_const_lv2_0)) and not((select_ln14_fu_243_p3 = ap_const_lv2_1)) and (select_ln24_fu_251_p3 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_24_fu_112 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln24_fu_251_p3 = ap_const_lv2_1)) and not((select_ln24_fu_251_p3 = ap_const_lv2_0)) and not((select_ln14_fu_243_p3 = ap_const_lv2_0)) and not((select_ln14_fu_243_p3 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_25_fu_116 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln14_fu_243_p3 = ap_const_lv2_0) and (select_ln24_fu_251_p3 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_fu_84 <= input_A_0_fu_263_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln24_1_fu_219_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln24_fu_231_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_row_load) + unsigned(ap_const_lv2_1));
    add_ln26_fu_312_p2 <= std_logic_vector(unsigned(select_ln14_fu_243_p3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in_A_TVALID, icmp_ln24_fu_213_p2, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or ((icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (in_A_TVALID = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_col_load_assign_proc : process(ap_CS_fsm_state1, col_fu_72, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_col_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_col_load <= col_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_80)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_row_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, row_fu_76)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_row_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_row_load <= row_fu_76;
        end if; 
    end process;

    icmp_ln24_fu_213_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_9) else "0";
    icmp_ln26_fu_237_p2 <= "1" when (ap_sig_allocacmp_col_load = ap_const_lv2_3) else "0";

    in_A_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in_A_TVALID, icmp_ln24_fu_213_p2, ap_start_int)
    begin
        if (((icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_A_TDATA_blk_n <= in_A_TVALID;
        else 
            in_A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_A_TREADY_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_A_TREADY <= ap_const_logic_1;
        else 
            in_A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    input_A_0_fu_263_p1 <= in_A_TDATA;
    p_out <= empty_25_fu_116;
    p_out1 <= empty_24_fu_112;

    p_out1_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= empty_23_fu_108;

    p_out2_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out3 <= empty_22_fu_104;

    p_out3_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out3_ap_vld <= ap_const_logic_1;
        else 
            p_out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out4 <= empty_21_fu_100;

    p_out4_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out4_ap_vld <= ap_const_logic_1;
        else 
            p_out4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out5 <= empty_20_fu_96;

    p_out5_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out5_ap_vld <= ap_const_logic_1;
        else 
            p_out5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out6 <= empty_19_fu_92;

    p_out6_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out6_ap_vld <= ap_const_logic_1;
        else 
            p_out6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out7 <= empty_18_fu_88;

    p_out7_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out7_ap_vld <= ap_const_logic_1;
        else 
            p_out7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out8 <= empty_fu_84;

    p_out8_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out8_ap_vld <= ap_const_logic_1;
        else 
            p_out8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln24_fu_213_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln24_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_fu_243_p3 <= 
        ap_const_lv2_0 when (icmp_ln26_fu_237_p2(0) = '1') else 
        ap_sig_allocacmp_col_load;
    select_ln24_fu_251_p3 <= 
        add_ln24_fu_231_p2 when (icmp_ln26_fu_237_p2(0) = '1') else 
        ap_sig_allocacmp_row_load;
end behav;
