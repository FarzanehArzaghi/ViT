// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matmul_1_matmul_1_Pipeline_loop_output_C1_loop_output_C2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_C_TREADY,
        output_C_address0,
        output_C_ce0,
        output_C_q0,
        p_phi_reload,
        p_phi7_reload,
        out_C_TDATA,
        out_C_TVALID,
        out_C_TKEEP,
        out_C_TSTRB,
        out_C_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_C_TREADY;
output  [3:0] output_C_address0;
output   output_C_ce0;
input  [31:0] output_C_q0;
input  [3:0] p_phi_reload;
input  [3:0] p_phi7_reload;
output  [31:0] out_C_TDATA;
output   out_C_TVALID;
output  [3:0] out_C_TKEEP;
output  [3:0] out_C_TSTRB;
output  [0:0] out_C_TLAST;

reg ap_idle;
reg output_C_ce0;
reg out_C_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln61_fu_137_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_C_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] local_stream_last_fu_228_p2;
reg   [0:0] local_stream_last_reg_299;
wire   [63:0] zext_ln64_2_fu_217_p1;
reg   [1:0] col_fu_66;
wire   [1:0] add_ln62_fu_234_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_col_load;
reg   [1:0] row_fu_70;
wire   [1:0] select_ln61_fu_175_p3;
reg   [1:0] ap_sig_allocacmp_row_load;
reg   [3:0] indvar_flatten55_fu_74;
wire   [3:0] add_ln61_1_fu_143_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten55_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln62_fu_161_p2;
wire   [1:0] add_ln61_fu_155_p2;
wire   [3:0] tmp_7_fu_187_p3;
wire   [3:0] zext_ln64_fu_183_p1;
wire   [1:0] select_ln14_fu_167_p3;
wire   [3:0] sub_ln64_fu_195_p2;
wire   [3:0] zext_ln64_1_fu_207_p1;
wire   [3:0] add_ln64_fu_211_p2;
wire   [0:0] cmp101_fu_201_p2;
wire   [0:0] icmp_ln69_fu_222_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 col_fu_66 = 2'd0;
#0 row_fu_70 = 2'd0;
#0 indvar_flatten55_fu_74 = 4'd0;
#0 ap_done_reg = 1'b0;
end

matmul_1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln61_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_fu_66 <= add_ln62_fu_234_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_fu_66 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln61_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten55_fu_74 <= add_ln61_1_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten55_fu_74 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln61_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            row_fu_70 <= select_ln61_fu_175_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            row_fu_70 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_stream_last_reg_299 <= local_stream_last_fu_228_p2;
    end
end

always @ (*) begin
    if (((icmp_ln61_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_load = 2'd0;
    end else begin
        ap_sig_allocacmp_col_load = col_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten55_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten55_load = indvar_flatten55_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_row_load = 2'd0;
    end else begin
        ap_sig_allocacmp_row_load = row_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_C_TDATA_blk_n = out_C_TREADY;
    end else begin
        out_C_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_C_TVALID = 1'b1;
    end else begin
        out_C_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_C_ce0 = 1'b1;
    end else begin
        output_C_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln61_1_fu_143_p2 = (ap_sig_allocacmp_indvar_flatten55_load + 4'd1);

assign add_ln61_fu_155_p2 = (ap_sig_allocacmp_row_load + 2'd1);

assign add_ln62_fu_234_p2 = (select_ln14_fu_167_p3 + 2'd1);

assign add_ln64_fu_211_p2 = (sub_ln64_fu_195_p2 + zext_ln64_1_fu_207_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_C_TREADY == 1'b0) | (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_C_TREADY == 1'b0) | (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (out_C_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp101_fu_201_p2 = ((select_ln61_fu_175_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_137_p2 = ((ap_sig_allocacmp_indvar_flatten55_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_161_p2 = ((ap_sig_allocacmp_col_load == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_222_p2 = ((select_ln14_fu_167_p3 == 2'd2) ? 1'b1 : 1'b0);

assign local_stream_last_fu_228_p2 = (icmp_ln69_fu_222_p2 & cmp101_fu_201_p2);

assign out_C_TDATA = output_C_q0;

assign out_C_TKEEP = p_phi_reload;

assign out_C_TLAST = local_stream_last_reg_299;

assign out_C_TSTRB = p_phi7_reload;

assign output_C_address0 = zext_ln64_2_fu_217_p1;

assign select_ln14_fu_167_p3 = ((icmp_ln62_fu_161_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_col_load);

assign select_ln61_fu_175_p3 = ((icmp_ln62_fu_161_p2[0:0] == 1'b1) ? add_ln61_fu_155_p2 : ap_sig_allocacmp_row_load);

assign sub_ln64_fu_195_p2 = (tmp_7_fu_187_p3 - zext_ln64_fu_183_p1);

assign tmp_7_fu_187_p3 = {{select_ln61_fu_175_p3}, {2'd0}};

assign zext_ln64_1_fu_207_p1 = select_ln14_fu_167_p3;

assign zext_ln64_2_fu_217_p1 = add_ln64_fu_211_p2;

assign zext_ln64_fu_183_p1 = select_ln61_fu_175_p3;

endmodule //matmul_1_matmul_1_Pipeline_loop_output_C1_loop_output_C2
