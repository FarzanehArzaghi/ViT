// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matmul_1_matmul_1_Pipeline_loop1_loop2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_reload99,
        p_reload98,
        p_reload97,
        p_reload96,
        p_reload95,
        p_reload94,
        p_reload93,
        p_reload92,
        p_reload,
        output_C_address0,
        output_C_ce0,
        output_C_we0,
        output_C_d0,
        p_reload118,
        p_reload117,
        p_reload116,
        p_reload115,
        p_reload114,
        p_reload113,
        p_reload112,
        p_reload111,
        p_reload110
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_reload99;
input  [31:0] p_reload98;
input  [31:0] p_reload97;
input  [31:0] p_reload96;
input  [31:0] p_reload95;
input  [31:0] p_reload94;
input  [31:0] p_reload93;
input  [31:0] p_reload92;
input  [31:0] p_reload;
output  [3:0] output_C_address0;
output   output_C_ce0;
output   output_C_we0;
output  [31:0] output_C_d0;
input  [31:0] p_reload118;
input  [31:0] p_reload117;
input  [31:0] p_reload116;
input  [31:0] p_reload115;
input  [31:0] p_reload114;
input  [31:0] p_reload113;
input  [31:0] p_reload112;
input  [31:0] p_reload111;
input  [31:0] p_reload110;

reg ap_idle;
reg output_C_ce0;
reg output_C_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_254_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln14_fu_284_p3;
reg   [1:0] select_ln14_reg_520;
reg   [1:0] select_ln14_reg_520_pp0_iter1_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter2_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter3_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter4_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter5_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter6_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter7_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter8_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter9_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter10_reg;
reg   [1:0] select_ln14_reg_520_pp0_iter11_reg;
wire   [1:0] select_ln49_fu_292_p3;
reg   [1:0] select_ln49_reg_528;
reg   [1:0] select_ln49_reg_528_pp0_iter1_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter2_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter3_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter4_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter5_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter6_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter7_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter8_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter9_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter10_reg;
reg   [1:0] select_ln49_reg_528_pp0_iter11_reg;
wire   [31:0] tmp_fu_321_p5;
wire   [31:0] tmp_3_fu_330_p5;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] mul_reg_547;
wire   [31:0] tmp_1_fu_339_p5;
wire   [31:0] tmp_4_fu_348_p5;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] res_reg_562;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] mul_1_reg_567;
wire   [31:0] tmp_2_fu_357_p5;
wire   [31:0] tmp_5_fu_366_p5;
wire   [31:0] grp_fu_216_p2;
reg   [31:0] res_1_reg_582;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] mul_2_reg_587;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] res_2_reg_592;
wire   [63:0] zext_ln56_2_fu_400_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] col_fu_78;
wire   [1:0] add_ln50_fu_300_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_col_load;
reg   [1:0] row_fu_82;
reg   [1:0] ap_sig_allocacmp_row_load;
reg   [3:0] indvar_flatten48_fu_86;
wire   [3:0] add_ln49_1_fu_260_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten48_load;
wire   [0:0] icmp_ln50_fu_278_p2;
wire   [1:0] add_ln49_fu_272_p2;
wire   [3:0] tmp_6_fu_378_p3;
wire   [3:0] zext_ln56_fu_375_p1;
wire   [3:0] sub_ln56_fu_385_p2;
wire   [3:0] zext_ln56_1_fu_391_p1;
wire   [3:0] add_ln56_fu_394_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 col_fu_78 = 2'd0;
#0 row_fu_82 = 2'd0;
#0 indvar_flatten48_fu_86 = 4'd0;
#0 ap_done_reg = 1'b0;
end

matmul_1_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_547),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

matmul_1_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(res_reg_562),
    .din1(mul_1_reg_567),
    .ce(1'b1),
    .dout(grp_fu_216_p2)
);

matmul_1_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(res_1_reg_582),
    .din1(mul_2_reg_587),
    .ce(1'b1),
    .dout(grp_fu_220_p2)
);

matmul_1_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_fu_321_p5),
    .din1(tmp_3_fu_330_p5),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

matmul_1_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_fu_339_p5),
    .din1(tmp_4_fu_348_p5),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

matmul_1_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_fu_357_p5),
    .din1(tmp_5_fu_366_p5),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

matmul_1_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U35(
    .din0(p_reload99),
    .din1(p_reload98),
    .din2(p_reload97),
    .din3(select_ln49_reg_528),
    .dout(tmp_fu_321_p5)
);

matmul_1_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U36(
    .din0(p_reload118),
    .din1(p_reload117),
    .din2(p_reload116),
    .din3(select_ln14_reg_520),
    .dout(tmp_3_fu_330_p5)
);

matmul_1_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U37(
    .din0(p_reload96),
    .din1(p_reload95),
    .din2(p_reload94),
    .din3(select_ln49_reg_528_pp0_iter3_reg),
    .dout(tmp_1_fu_339_p5)
);

matmul_1_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U38(
    .din0(p_reload115),
    .din1(p_reload114),
    .din2(p_reload113),
    .din3(select_ln14_reg_520_pp0_iter3_reg),
    .dout(tmp_4_fu_348_p5)
);

matmul_1_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U39(
    .din0(p_reload93),
    .din1(p_reload92),
    .din2(p_reload),
    .din3(select_ln49_reg_528_pp0_iter6_reg),
    .dout(tmp_2_fu_357_p5)
);

matmul_1_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U40(
    .din0(p_reload112),
    .din1(p_reload111),
    .din2(p_reload110),
    .din3(select_ln14_reg_520_pp0_iter6_reg),
    .dout(tmp_5_fu_366_p5)
);

matmul_1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln49_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col_fu_78 <= add_ln50_fu_300_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_fu_78 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln49_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten48_fu_86 <= add_ln49_1_fu_260_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten48_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln49_fu_254_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            row_fu_82 <= select_ln49_fu_292_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            row_fu_82 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul_1_reg_567 <= grp_fu_228_p2;
        mul_2_reg_587 <= grp_fu_232_p2;
        mul_reg_547 <= grp_fu_224_p2;
        res_1_reg_582 <= grp_fu_216_p2;
        res_2_reg_592 <= grp_fu_220_p2;
        res_reg_562 <= grp_fu_211_p2;
        select_ln14_reg_520_pp0_iter10_reg <= select_ln14_reg_520_pp0_iter9_reg;
        select_ln14_reg_520_pp0_iter11_reg <= select_ln14_reg_520_pp0_iter10_reg;
        select_ln14_reg_520_pp0_iter2_reg <= select_ln14_reg_520_pp0_iter1_reg;
        select_ln14_reg_520_pp0_iter3_reg <= select_ln14_reg_520_pp0_iter2_reg;
        select_ln14_reg_520_pp0_iter4_reg <= select_ln14_reg_520_pp0_iter3_reg;
        select_ln14_reg_520_pp0_iter5_reg <= select_ln14_reg_520_pp0_iter4_reg;
        select_ln14_reg_520_pp0_iter6_reg <= select_ln14_reg_520_pp0_iter5_reg;
        select_ln14_reg_520_pp0_iter7_reg <= select_ln14_reg_520_pp0_iter6_reg;
        select_ln14_reg_520_pp0_iter8_reg <= select_ln14_reg_520_pp0_iter7_reg;
        select_ln14_reg_520_pp0_iter9_reg <= select_ln14_reg_520_pp0_iter8_reg;
        select_ln49_reg_528_pp0_iter10_reg <= select_ln49_reg_528_pp0_iter9_reg;
        select_ln49_reg_528_pp0_iter11_reg <= select_ln49_reg_528_pp0_iter10_reg;
        select_ln49_reg_528_pp0_iter2_reg <= select_ln49_reg_528_pp0_iter1_reg;
        select_ln49_reg_528_pp0_iter3_reg <= select_ln49_reg_528_pp0_iter2_reg;
        select_ln49_reg_528_pp0_iter4_reg <= select_ln49_reg_528_pp0_iter3_reg;
        select_ln49_reg_528_pp0_iter5_reg <= select_ln49_reg_528_pp0_iter4_reg;
        select_ln49_reg_528_pp0_iter6_reg <= select_ln49_reg_528_pp0_iter5_reg;
        select_ln49_reg_528_pp0_iter7_reg <= select_ln49_reg_528_pp0_iter6_reg;
        select_ln49_reg_528_pp0_iter8_reg <= select_ln49_reg_528_pp0_iter7_reg;
        select_ln49_reg_528_pp0_iter9_reg <= select_ln49_reg_528_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln14_reg_520 <= select_ln14_fu_284_p3;
        select_ln14_reg_520_pp0_iter1_reg <= select_ln14_reg_520;
        select_ln49_reg_528 <= select_ln49_fu_292_p3;
        select_ln49_reg_528_pp0_iter1_reg <= select_ln49_reg_528;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_254_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_col_load = 2'd0;
    end else begin
        ap_sig_allocacmp_col_load = col_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten48_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten48_load = indvar_flatten48_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_row_load = 2'd0;
    end else begin
        ap_sig_allocacmp_row_load = row_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        output_C_ce0 = 1'b1;
    end else begin
        output_C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        output_C_we0 = 1'b1;
    end else begin
        output_C_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_1_fu_260_p2 = (ap_sig_allocacmp_indvar_flatten48_load + 4'd1);

assign add_ln49_fu_272_p2 = (ap_sig_allocacmp_row_load + 2'd1);

assign add_ln50_fu_300_p2 = (select_ln14_fu_284_p3 + 2'd1);

assign add_ln56_fu_394_p2 = (sub_ln56_fu_385_p2 + zext_ln56_1_fu_391_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln49_fu_254_p2 = ((ap_sig_allocacmp_indvar_flatten48_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_278_p2 = ((ap_sig_allocacmp_col_load == 2'd3) ? 1'b1 : 1'b0);

assign output_C_address0 = zext_ln56_2_fu_400_p1;

assign output_C_d0 = res_2_reg_592;

assign select_ln14_fu_284_p3 = ((icmp_ln50_fu_278_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_col_load);

assign select_ln49_fu_292_p3 = ((icmp_ln50_fu_278_p2[0:0] == 1'b1) ? add_ln49_fu_272_p2 : ap_sig_allocacmp_row_load);

assign sub_ln56_fu_385_p2 = (tmp_6_fu_378_p3 - zext_ln56_fu_375_p1);

assign tmp_6_fu_378_p3 = {{select_ln49_reg_528_pp0_iter11_reg}, {2'd0}};

assign zext_ln56_1_fu_391_p1 = select_ln14_reg_520_pp0_iter11_reg;

assign zext_ln56_2_fu_400_p1 = add_ln56_fu_394_p2;

assign zext_ln56_fu_375_p1 = select_ln49_reg_528_pp0_iter11_reg;

endmodule //matmul_1_matmul_1_Pipeline_loop1_loop2
